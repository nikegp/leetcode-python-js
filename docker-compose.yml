services:
  local-node:
    container_name: local-node-container
    build:
      context: ./node
      args:
        - NODE_ENV=development
    # you can use legacy debug config or new inspect
    # NOTE: if nodemon isn't restarting on changes, you might be on Windows
    # which has trouble seeing file changes, so add -L to use legacy polling
    # https://github.com/remy/nodemon#application-isnt-restarting
    #command: ../node_modules/.bin/nodemon --debug=0.0.0.0:5858
    command: ../node_modules/.bin/nodemon --inspect=0.0.0.0:9229 ./bin/www
    ports:
      - "80:3000"
      - "9229:9229"
      - "9230:9230"
    volumes:
      - ./node:/opt/node_app/app
      - ./challenges:/opt/node_app/app/challenges
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker compose down" and will
      # be saved on host for next build.
      # remember to install from the parent directory to the code bind-mount:
      # docker compose exec -w /opt/node_app node npm install --save bower
      - ./node/package.json:/opt/node_app/package.json
      - ./node/package-lock.json:/opt/node_app/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_app/node_modules location. Thanks to PR from @brnluiz
      - notused:/opt/node_app/app/node_modules
    environment:
      - NODE_ENV=development
    healthcheck:
      disable: true

  local-python:
    container_name: local-python-container
    build:
      context: ./python
    volumes:
      - ./challenges:/app/challenges

  pg-db:
    image: postgres:15.1
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes:
      - pg-db:/var/lib/postgresql/data

  mysql-db:
    image: mysql:8.0
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      - MYSQL_DATABASE=test
      - MYSQL_ROOT_PASSWORD=password
    ports:
      - '3306:3306'
    volumes:
      - mysql-db:/var/lib/mysql

volumes:
  notused:
  pg-db:
    driver: local
  mysql-db:
    driver: local